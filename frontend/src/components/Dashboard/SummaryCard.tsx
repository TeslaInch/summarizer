import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Download, Calendar, User, Clock, FileText, Eye, AlertCircle } from "lucide-react";

interface PDF {
  id: number;
  title: string;
  summary: string;
  uploadDate: string;
  processingStatus: 'processing' | 'completed' | 'error';
  author: string;
}

interface ExtendedDetails {
  fullSummary: string;
  keyPoints: string[];
  readingTime: string;
  pageCount: number;
  difficulty: string;
}

interface SummaryCardProps {
  pdf: PDF;
  expanded?: boolean;
  onViewDetails?: () => void;
  extendedDetails?: ExtendedDetails;
}

const SummaryCard = ({ pdf, expanded = false, onViewDetails, extendedDetails }: SummaryCardProps) => {
  const showToast = (title: string, description: string) => {
    // Simple toast simulation - in a real app you'd use a proper toast system
    console.log(`Toast: ${title} - ${description}`);
  };

  const handleDownload = () => {
    // Create the text content for download
    const textContent = `${pdf.title}
Author: ${pdf.author}
Date: ${formatDate(pdf.uploadDate)}

SUMMARY:
${pdf.summary}

${extendedDetails ? `
DETAILED SUMMARY:
${extendedDetails.fullSummary}



DOCUMENT INFO:
- Pages: ${extendedDetails.pageCount}
- Format: PDF
` : ''}

Generated by AI Summary Tool`;

    // Create and download the file
    const blob = new Blob([textContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${pdf.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_summary.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    showToast("Download completed", `Summary for "${pdf.title}" has been downloaded as a text file`);
  };

  const handleRetry = () => {
    showToast("Retrying...", `Retrying to process "${pdf.title}"`);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'processing':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'error':
        return 'bg-red-100 text-red-800 border-red-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'completed':
        return 'Completed';
      case 'processing':
        return 'Processing';
      case 'error':
        return 'Error';
      default:
        return status;
    }
  };

  return (
    <Card className="shadow-lg hover:shadow-xl transition-all duration-300 w-full">
      <CardHeader className="pb-3 p-3 sm:p-6 sm:pb-3">
        <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3 sm:gap-4">
          <div className="space-y-2 min-w-0 flex-1">
            <CardTitle className="text-base sm:text-lg lg:text-xl font-semibold text-gray-900 line-clamp-2 sm:line-clamp-3 pr-2">
              {pdf.title}
            </CardTitle>
            <div className="flex flex-col xs:flex-row xs:items-center gap-2 xs:gap-4 text-xs sm:text-sm text-gray-600">
              <div className="flex items-center min-w-0">
                <User className="mr-1 h-3 w-3 sm:h-4 sm:w-4 flex-shrink-0" />
                <span className="truncate">{pdf.author}</span>
              </div>
              <div className="flex items-center">
                <Calendar className="mr-1 h-3 w-3 sm:h-4 sm:w-4 flex-shrink-0" />
                <span className="whitespace-nowrap">{formatDate(pdf.uploadDate)}</span>
              </div>
            </div>
          </div>
          <Badge 
            className={`${getStatusColor(pdf.processingStatus)} flex-shrink-0 text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-1.5 self-start`}
          >
            {pdf.processingStatus === 'processing' && (
              <Clock className="mr-1 h-3 w-3 animate-spin" />
            )}
            {pdf.processingStatus === 'error' && (
              <AlertCircle className="mr-1 h-3 w-3" />
            )}
            <span className="hidden xs:inline">{getStatusText(pdf.processingStatus)}</span>
            <span className="xs:hidden">
              {pdf.processingStatus === 'processing' ? '...' : 
               pdf.processingStatus === 'error' ? '!' : '✓'}
            </span>
          </Badge>
        </div>
      </CardHeader>
      
      <CardContent className="pt-0 p-3 sm:p-6 sm:pt-0">
        {pdf.processingStatus === 'completed' ? (
          <div className="space-y-4">
            <div className="bg-gray-50 rounded-lg p-3 sm:p-4">
              <div className="flex items-center mb-2">
                <FileText className="mr-2 h-4 w-4 text-blue-600 flex-shrink-0" />
                <span className="font-medium text-sm sm:text-base">AI Summary</span>
              </div>
              <p className="text-gray-700 leading-relaxed text-sm sm:text-base line-clamp-3 sm:line-clamp-4">
                {pdf.summary}
              </p>
            </div>

            {expanded && extendedDetails && (
              <div className="space-y-4 border-t pt-4">
                {/* Document Stats */}
                <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4">
                  <div className="bg-blue-50 rounded-lg p-3 text-center">
                    <div className="text-lg sm:text-xl font-bold text-blue-600">{extendedDetails.pageCount}</div>
                    <div className="text-xs sm:text-sm text-gray-600">Pages</div>
                  </div>
                  <div className="bg-green-50 rounded-lg p-3 text-center">
                    <div className="text-xs sm:text-sm font-semibold text-green-600">{extendedDetails.readingTime}</div>
                    <div className="text-xs sm:text-sm text-gray-600">Reading</div>
                  </div>
                  <div className="bg-orange-50 rounded-lg p-3 text-center">
                    <div className="text-xs sm:text-sm font-semibold text-orange-600">{extendedDetails.difficulty}</div>
                    <div className="text-xs sm:text-sm text-gray-600">Level</div>
                  </div>
                  <div className="bg-purple-50 rounded-lg p-3 text-center">
                    <div className="text-xs sm:text-sm font-semibold text-purple-600">PDF</div>
                    <div className="text-xs sm:text-sm text-gray-600">Format</div>
                  </div>
                </div>

                {/* Full Summary */}
                <div className="bg-gray-50 rounded-lg p-3 sm:p-4">
                  <div className="flex items-center mb-3">
                    <FileText className="mr-2 h-4 w-4 text-blue-600 flex-shrink-0" />
                    <span className="font-medium text-sm sm:text-base">Detailed Summary</span>
                  </div>
                  <div className="text-gray-700 leading-relaxed text-sm sm:text-base whitespace-pre-line">
                    {extendedDetails.fullSummary}
                  </div>
                </div>

                {/* Key Points */}
                <div className="bg-blue-50 rounded-lg p-3 sm:p-4">
                  <div className="flex items-center mb-3">
                    <div className="w-2 h-2 bg-blue-600 rounded-full mr-2"></div>
                    <span className="font-medium text-sm sm:text-base">Key Points</span>
                  </div>
                  <ul className="space-y-2">
                    {extendedDetails.keyPoints.map((point, index) => (
                      <li key={index} className="flex items-start text-sm sm:text-base text-gray-700">
                        <span className="text-blue-600 mr-2 flex-shrink-0">•</span>
                        <span>{point}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}
            
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 pt-2">
              <div className="flex items-center text-xs sm:text-sm text-gray-500">
                <Clock className="mr-1 h-3 w-3 sm:h-4 sm:w-4 flex-shrink-0" />
                <span>{expanded && extendedDetails ? extendedDetails.readingTime : '~2 min read'}</span>
              </div>
              
              <div className="flex flex-col xs:flex-row gap-2 xs:gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleDownload}
                  className="hover:bg-blue-600 hover:text-white text-xs sm:text-sm w-full xs:w-auto"
                >
                  <Download className="mr-1 sm:mr-2 h-3 w-3 sm:h-4 sm:w-4" />
                  <span className="xs:hidden">Download Summary</span>
                  <span className="hidden xs:inline">Download</span>
                </Button>
                <Button
                  size="sm"
                  onClick={onViewDetails}
                  className="bg-blue-600 hover:bg-blue-700 text-white text-xs sm:text-sm w-full xs:w-auto"
                >
                  <Eye className="mr-1 sm:mr-2 h-3 w-3 sm:h-4 sm:w-4" />
                  <span className="xs:hidden">{expanded ? 'Show Less' : 'View Full Details'}</span>
                  <span className="hidden xs:inline">{expanded ? 'Show Less' : 'View Details'}</span>
                </Button>
              </div>
            </div>
          </div>
        ) : pdf.processingStatus === 'processing' ? (
          <div className="flex items-center justify-center py-6 sm:py-8">
            <div className="text-center">
              <div className="animate-spin rounded-full h-6 w-6 sm:h-8 sm:w-8 border-b-2 border-blue-600 mx-auto mb-3"></div>
              <p className="text-sm sm:text-base text-gray-600 font-medium">
                AI is analyzing your document...
              </p>
              <p className="text-xs sm:text-sm text-gray-500 mt-1">
                This processing time varies, depending on document length and complexity.
              </p>
            </div>
          </div>
        ) : (
          <div className="flex items-center justify-center py-6 sm:py-8">
            <div className="text-center">
              <div className="w-8 h-8 sm:w-10 sm:h-10 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <AlertCircle className="h-4 w-4 sm:h-5 sm:w-5 text-red-600" />
              </div>
              <p className="text-sm sm:text-base text-red-600 font-medium mb-3">
                Failed to process document
              </p>
              <p className="text-xs sm:text-sm text-gray-500 mb-4 max-w-xs mx-auto">
                There was an error processing your PDF. Please try again or contact support if the issue persists.
              </p>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleRetry}
                className="text-xs sm:text-sm hover:bg-red-50 hover:text-red-700 hover:border-red-200"
              >
                <AlertCircle className="mr-1 sm:mr-2 h-3 w-3 sm:h-4 sm:w-4" />
                Retry Processing
              </Button>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default SummaryCard;