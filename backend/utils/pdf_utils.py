# utils/pdf_utils.py
import fitz  # PyMuPDF
import pdfplumber
from io import BytesIO
import logging

logger = logging.getLogger(__name__)

# Known scanner watermarks (common in apps like CamScanner, Adobe Scan)
SCANNER_WATERMARKS = {
    'camscanner', 'scanbot', 'adobe scan', 'microsoft lens',
    'tiny scanner', 'mobilepdf', 'pdf now', 'document scanner',
    'scanned by', 'created by', 'converted by', 'generated by',
    'image only', 'no text', 'draft', 'confidential'
}

def extract_text_from_pdf(content: bytes) -> str:
    """
    Extract text from a PDF.
    - Returns clean text if the PDF is native
    - Detects and rejects scanned PDFs
    """
    try:
        # Validate PDF structure
        with fitz.open(stream=content, filetype="pdf") as doc:
            if doc.page_count == 0:
                return "Empty PDF: No pages found."

        all_text = ""
        total_chars = 0
        scanner_mentions = 0  # Count of scanner-related words

        with pdfplumber.open(BytesIO(content)) as pdf:
            for page_num in range(len(pdf.pages)):
                # Use fitz for main text extraction
                doc = fitz.open(stream=content, filetype="pdf")
                page = doc[page_num]
                text = page.get_text("text").strip()
                doc.close()

                # Count meaningful characters
                cleaned_text = "".join(c for c in text if c.isalnum() or c.isspace())
                total_chars += len(cleaned_text)

                # Count scanner watermarks
                text_lower = text.lower()
                for word in SCANNER_WATERMARKS:
                    if word in text_lower:
                        scanner_mentions += text_lower.count(word)

                # Append to full text (for later analysis)
                if text:
                    all_text += text + "\n"

        # --- Decision Logic ---
        # If no meaningful text was extracted
        if total_chars < 50:
            return "Scanned PDFs are not supported. Please upload a text-based PDF."

        # If scanner watermarks appear more than 3 times and text is minimal
        if scanner_mentions > 3 and total_chars < 200:
            return "Scanned PDFs are not supported. Please upload a text-based PDF."

        # If the entire text is just "CamScanner" repeated
        if all_text.strip() and all(word.lower() in SCANNER_WATERMARKS for word in all_text.split() if len(word) > 2):
            return "Scanned PDFs are not supported. Please upload a text-based PDF."

        # âœ… Valid text-based PDF
        return all_text.strip()

    except Exception as e:
        logger.error(f"Text extraction failed: {e}")
        return "Could not extract text from PDF. The file may be corrupted or encrypted."